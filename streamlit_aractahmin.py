# -*- coding: utf-8 -*-
"""streamlit_aractahmin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LHF5269n49olJGZECJrC2LTRpLhRZeca
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression,Lasso,Ridge,ElasticNet
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import re
from sklearn.impute import SimpleImputer
import streamlit as st
import pandas as pd


# GitHub'daki 12 CSV dosyasının URL'lerini belirtin
urls = [
    "https://raw.githubusercontent.com/Emredogan55/streamlit_car_project/main/data_audi_otomobil.csv",
    "https://raw.githubusercontent.com/Emredogan55/streamlit_car_project/main/data_bmw_otomobil.csv",
    "https://raw.githubusercontent.com/Emredogan55/streamlit_car_project/main/data_mercedes_otomobil.csv",
    "https://raw.githubusercontent.com/Emredogan55/streamlit_car_project/main/data_otomobil_citroen.csv",
    "https://raw.githubusercontent.com/Emredogan55/streamlit_car_project/main/data_otomobil_fiat.csv",
    "https://raw.githubusercontent.com/Emredogan55/streamlit_car_project/main/data_otomobil_ford.csv",
    "https://raw.githubusercontent.com/Emredogan55/streamlit_car_project/main/data_otomobil_honda.csv",
    "https://raw.githubusercontent.com/Emredogan55/streamlit_car_project/main/data_otomobil_hyundai.csv",
    "https://raw.githubusercontent.com/Emredogan55/streamlit_car_project/main/data_otomobil_opel.csv",
    "https://raw.githubusercontent.com/Emredogan55/streamlit_car_project/main/data_otomobil_toyota.csv",
    "https://raw.githubusercontent.com/Emredogan55/streamlit_car_project/main/data_otomobil_volswogen.csv",
    "https://raw.githubusercontent.com/Emredogan55/streamlit_car_project/main/data_renault_otomobil.csv"
]

# Tüm CSV dosyalarını birleştirerek bir DataFrame oluşturun
combined_df = pd.DataFrame()

# Tüm CSV dosyalarını indirin ve birleştirin
for url in urls:
    # CSV dosyasını indirin ve DataFrame'e dönüştürün
    df = pd.read_csv(url)
    # Birleştirilmiş DataFrame'e ekleyin
    if combined_df.empty:
        combined_df = df
    else:
        combined_df = combined_df.append(df, ignore_index=True)
df=combined_df        

silinecek_sutunlar = ["Unnamed: 0", "ilan_no", "cekis", "boya_degisen", "arac_turu", "garanti", "plaka_uyruk", "renk",
                        "Yıllık mtv tutarı", "Takasa uygunmu", "sag_arka_camurluk", "arka_kaput", "sol_arka_camurluk",
                        "tavan", "sol_arka_kapi", "sol_on_kapi", "sag_on_camurluk", "motor_kaputu", "sol_on_camurluk",
                        "on_tampon", "arka_tampon", "sag_arka_kapi", "sag_on_kapi", "tramer", "Araç ilk sahibindenmi",
                        "ilan_tarih", "kasa_tipi"]
df.drop(silinecek_sutunlar, axis=1, inplace=True)

df['price'] = df['price'].str.replace('.', '').str.replace(',', '.').astype(float)
df["km"] = df["km"].str.replace(" km", "").str.replace(".", "").astype(float)

df['motor_hacmi'] = df['motor_hacmi'].str.replace(' cc', '')
df['motor_hacmi'] = df['motor_hacmi'].str.extract('(\d+)').astype(float)
df.dropna(subset=['motor_hacmi'], inplace=True)
df['motor_hacmi'].fillna(df['motor_hacmi'].mean(), inplace=True)

df['motor_gucu'] = df['motor_gucu'].str.replace(' hp', '', regex=True)
df['motor_gucu'] = df['motor_gucu'].str.replace(' HP', '', regex=True)


df['motor_gucu'] = df['motor_gucu'].str.replace('[^0-9-]', '', regex=True)
def extract_max_value(text):
    if isinstance(text, str) and '-' in text:
        values = text.split('-')
        values = [int(val) for val in values if val.strip()]
        if values:
            return str(np.max(values))
    return text

df['motor_gucu'] = df['motor_gucu'].apply(extract_max_value)


def clean_and_convert(value):
  if pd.isnull(value):
    return np.nan
  value = str(value)
  if '-' in value:
    values = value.split('-')
    values = [int(val) for val in values if val.isdigit()]
    if len(values) > 0:
      return np.max(values)
  if value.isdigit():
    return int(value)
  return np.nan


df['motor_gucu'] = df['motor_gucu'].apply(clean_and_convert).astype('float64')

# Sayısal olmayan karakterleri filtreleme
df['model'] = df['model'].apply(lambda x: re.findall(r'\d+\.\d+', str(x))[0] if re.findall(r'\d+\.\d+', str(x)) else '')

# Sadece sayısal değerleri içeren sütunu filtreleme
numeric_models = df[df['model'].astype(bool)]['model']
print(numeric_models)

df["model"] = df["model"].replace("", np.nan).replace("230.6", "2.3").astype("float64")

# model ve motor_gucu sütunlarındaki NaN değerleri interpolasyon kullanarak doldurun
df['model'].interpolate(method='linear', inplace=True)
df['motor_gucu'].interpolate(method='linear', inplace=True)
data=df

from catboost import CatBoostRegressor
import pandas as pd

# CatBoost modelini tanımla
model = CatBoostRegressor(depth=10, iterations=300, learning_rate=0.1)

# Kategorik değişken sütunlarını bir liste olarak tanımla
cat_columns = ['marka', 'seri', 'vites_tipi', 'yakıt_tipi']

# Veri setini bağımsız değişkenler (X) ve hedef değişken (y) olarak ayır
X = data.drop('price', axis=1)
y = data['price']

# Modeli eğit
model.fit(X, y, cat_features=cat_columns)

# Modeli kaydet
model.save_model("catboost_model.bin")




st.title('Araç Fiyat Tahmin Projesi')

# Sütunlar
columns = data.columns
# Price sütununu çıkar
data_without_price = data.drop("price", axis=1)

# Markaları al
markalar = data_without_price["marka"].unique()

# Marka seçimi
selected_marka = st.sidebar.selectbox("Marka", markalar)

# Seçilen markaya ait serileri al
seriler = data_without_price[data_without_price["marka"] == selected_marka]["seri"].unique()

# Seri seçimi
selected_seri = st.sidebar.selectbox("Seri", seriler)

# Vites tiplerini al
vites_tipleri = data_without_price[data_without_price["marka"] == selected_marka][data_without_price["seri"] == selected_seri]["vites_tipi"].unique()

# Vites tipi seçimi
selected_vites_tipi = st.sidebar.selectbox("Vites Tipi", vites_tipleri)

# Yakıt tiplerini al
yakit_tipleri = data_without_price[data_without_price["marka"] == selected_marka][data_without_price["seri"] == selected_seri][data_without_price["vites_tipi"] == selected_vites_tipi]["yakıt_tipi"].unique()

# Yakıt tipi seçimi
selected_yakit = st.sidebar.selectbox("Yakıt Tipi", yakit_tipleri)

yillar = data_without_price[data_without_price["marka"] == selected_marka][data_without_price["seri"] == selected_seri][data_without_price["vites_tipi"] == selected_vites_tipi][data_without_price["yakıt_tipi"] == selected_yakit]["yıl"].unique()

# Sort the values in ascending order
yillar = sorted(yillar)

# Yıl seçimi
selected_yil = st.sidebar.selectbox("Yıl", yillar)


# KM seçimi
selected_km = st.sidebar.number_input("KM", min_value=0)

# Motor hacmi seçimi
selected_model = st.sidebar.number_input("Model", value=0.0, min_value=0.0, max_value=None, step=0.1)



# Tahmin yapmak için girdi verisini oluştur
input_data = pd.DataFrame({
    'marka': [selected_marka],
    'seri': [selected_seri],
    'vites_tipi': [selected_vites_tipi],
    'yakıt_tipi': [selected_yakit],
    'yıl': [selected_yil],
    'km': [selected_km],
    'model': [selected_model]
})

# Kategorik değişkenleri one-hot encoding ile kodla
input_data_encoded = pd.get_dummies(input_data, columns=['marka', 'seri', 'vites_tipi', 'yakıt_tipi'])

# Eğitim veri setindeki sütunlarla girdi veri setini uyumlu hale getir
missing_cols = set(X.columns) - set(input_data_encoded.columns)
for col in missing_cols:
    input_data_encoded[col] = 0
input_data_encoded = input_data_encoded[X.columns]

# Tahmin yap
predicted_price = model.predict(input_data_encoded)

# Tahmin edilen fiyatı ekrana yazdır
st.write("Tahmin edilen fiyat:", predicted_price[0])
